name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: adrmrn/tidio-mcp

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run Ruff linter
      run: uv run ruff check
    
    - name: Check Ruff formatting
      run: uv run ruff format --check

  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v6
    
    - name: Install dependencies
      run: uv sync
    
    - name: Run tests
      run: uv run pytest -v --cov --cov-report=term-missing

  build-and-push:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=edge
        labels: |
          org.opencontainers.image.title=Tidio MCP Server
          org.opencontainers.image.description=Tidio MCP Server
          org.opencontainers.image.vendor=adrmrn
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
